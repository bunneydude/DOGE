// Generated by CoffeeScript 1.6.3
/* debugmode allows to acccess a local component list with out the need for server access*/


(function() {
  var DeviceController, app, debugMode;

  debugMode = false;

  /* setting up the name of the Contorller*/


  app = angular.module('DeviceManager', ['ngAnimate', 'ngRoute', 'ngResource', 'ngSanitize', 'ionic', 'DeviceManager.directives', 'DeviceManager.services', 'DeviceManager.servicesa', 'DeviceManager.chartController', 'DeviceManager.graphController'], function($routeProvider, $locationProvider) {
    $routeProvider.when('/pin', {
      templateUrl: 'views/Pin.html'
    });
    $routeProvider.when('/device', {
      templateUrl: 'views/Device.html'
    });
    $routeProvider.when('/deviceChart', {
      templateUrl: 'views/DeviceChart.html',
      controller: 'chartController'
    });
    $routeProvider.when('/visNetwork', {
     templateUrl: 'views/VisNetwork.html',
     controller: 'graphController'
     });
    $routeProvider.when('/deviceDetails', {
      templateUrl: 'views/DeviceDetails.html'
    });
    $routeProvider.when('/pinAdvanced', {
      templateUrl: 'views/PinAdvanced.html'
    });
    $routeProvider.when('/pinDetails', {
      templateUrl: 'views/PinDetails.html'
    });
    $routeProvider.when('/About', {
      templateUrl: 'views/About.html'
    });
    $routeProvider.when('/LoadData', {
      templateUrl: 'views/LoadData.html'
    });
    return $routeProvider.otherwise({
      templateUrl: 'views/DeviceList.html'
    });
  });

  /* setting up the socket mananger and make sure everything is sent to the rootscope this allows us to use socket.io from with in angular*/


  app.controller('DeviceController', DeviceController = (function() {
    DeviceController.$inject = ['$scope', '$routeParams', '$ionicModal'];

    function DeviceController($scope, $routeParams, $ionicModal) {
      this.$scope = $scope;
      this.$routeParams = $routeParams;
      this.prepareApplication(this.$scope, $ionicModal);
      if (debugMode) {
        this.setupSocketConnection(this.$scope);
      } else {
        this.setupTestData(this.$scope);
      }
    }

    /* Here we prepare the spplicaiton itself setting states before  initialization and*/


    DeviceController.prototype.prepareApplication = function($scope, $ionicModal) {
      $scope.deviceReady = false;
      $scope.currentDevice = false;
      $scope.currentTabs = [];
      $scope.devices = [];
      $scope.path = [];
      /* this should come from the server also*/

      $scope.pinModes = [
        {
          name: 'input',
          possibleStates: [
            {
              name: 'Pull Up',
              color: '#FF3300'
            }, {
              name: 'Pull Down',
              color: '#CC6600'
            }, {
              name: 'Float',
              color: '#FF0000'
            }
          ]
        }, {
          name: 'output',
          possibleStates: [
            {
              name: 'High',
              color: '#0000FF'
            }, {
              name: 'High',
              color: '#0066CC'
            }
          ]
        }
      ];
      $scope.setCurrentDevice = function(id) {
        var device, _i, _len, _ref;
        _ref = $scope.devices;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          device = _ref[_i];
          if (device.id === id) {
            $scope.currentDevice = device;
          }
        }
        $scope.pushPage(id);
        return $scope.currentTabs = [
          {
            name: 'Device',
            link: 'device',
            selected: true
          }, {
            name: 'Device Details',
            link: 'deviceDetails'
          }
        ];
      };
      $scope.setCurrentPin = function(id) {
        var pin, subpin, _i, _j, _len, _len1, _ref, _ref1;
        _ref = $scope.currentDevice.pins;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pin = _ref[_i];
          if (pin.id === id) {
            $scope.currentPin = pin;
          }
          _ref1 = pin.subpins;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            subpin = _ref1[_j];
            if (subpin.id === id) {
              $scope.currentPin = subpin;
            }
          }
        }
        $scope.pushPage(id);
        return $scope.currentTabs = [
          {
            name: 'Pin ',
            link: 'pin',
            selected: true
          }, {
            name: 'Pin Details',
            link: 'pinDetails'
          }
        ];
      };
      /* here is the gp io data*/

      $scope.gpIOsForPin = function() {
        var Ios, io, _i, _len, _ref;
        Ios = [];
        _ref = $scope.gpIos;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          io = _ref[_i];
          if (io.pin === currentPin.id) {
            Ios.push(io.pin);
          }
        }
        return Ios;
      };
      $ionicModal.fromTemplateUrl('views/IoModal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function(modal) {
        return $scope.modal = modal;
      });
      $scope.openModal = function(index, pinID) {
        var index2, io, _i, _len, _ref;
        if (pinID === -1) {
          $scope.currentIO = $scope.gpIos[index];
        } else {
          index2 = 0;
          _ref = $scope.gpIos;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            io = _ref[_i];
            if (io.pin === currentPin.id) {
              index2++;
              if (index2 === index) {
                $scope.currentIO = io;
              }
            }
          }
        }
        return $scope.modal.show();
      };
      $scope.closeModal = function() {
        return $scope.modal.hide();
      };
      $scope.$on('$destroy', function() {
        return $scope.modal.remove();
      });
      /* this will handle how to navigate*/

      $scope.pushPage = function(id) {
        $scope.path.push(id);
        return $scope.inSubSection = true;
      };
      $scope.popPage = function() {
        var lastID, length, location;
        lastID = $scope.path.pop();
        length = $scope.path.length;
        location = '';
        if (length > 1) {
          $scope.setCurrentPin(lastID);
          location = '#/pin';
        } else if (length === 1) {
          $scope.setCurrentDevice(lastID);
          location = '#/device';
        } else {
          $scope.inSubSection = false;
          $scope.currentTabs = [];
          location = '';
        }
        /* this is an extra pop this will need to be fixed later*/

        $scope.path.pop();
        return location;
      };
      $scope.goback = function() {
        var location;
        location = $scope.popPage();
        return window.location.hash = location;
      };
      return $scope.selectTab = function($index) {
        var tab, _i, _len, _ref;
        _ref = $scope.currentTabs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tab = _ref[_i];
          tab.selected = false;
        }
        return $scope.currentTabs[$index].selected = true;
      };
    };

    /* Here we setup the socket connection and define functions that we want to use*/


    DeviceController.prototype.setupSocketConnection = function($scope, socket) {
      /* Here are the listeners which recieve data from the server*/

      socket.on('init', function(data) {
        $scope.deviceReady = true;
        /* We assume that some of the data being send back form the sever is data on how the device is laidout this make for easy resuablity of the main app*/

        return $scope.devices = data;
      });
      socket.on('error', function(data) {});
      socket.on('update:pin', function(data) {
        return $scope.deviceStatus = data.status;
      });
      /* Here is were we send data to the server*/

      return $scope.changePinState = function(state) {
        $scope.currentPin.activemode = state.name;
        $scope.currentPin.currentColor = state.color;
        return socket.emit('updateComponent', {
          pinID: currentPin.id,
          activeMode: currentPin.activemode,
          input: currentPin.input,
          output: currentPin.output
        });
      };
    };

    DeviceController.prototype.setupTestData = function($scope) {
      $scope.devices = window.getDeviceInfo();
      $scope.gpIos = window.getIoInfo();
      $scope.changePinState = function(state) {
        $scope.currentPin.activemode = state.name;
        return $scope.currentPin.currentColor = state.color;
      };
      return $scope.changeIoState = function(state) {
        $scope.currentIO.activemode = state.name;
        return $scope.currentIO.currentColor = state.color;
      };
    };

    return DeviceController;

  })());

}).call(this);
