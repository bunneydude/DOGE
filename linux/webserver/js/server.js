// Generated by CoffeeScript 1.6.3
(function() {
  var app, fs, generateChartData, getUpdateData, io,  server, __dirname;

  app = require('express')();

  app.use(require('express').static('./webserver'));

  app.get('/', function(req, res) {
    console.log('recieved request');
    return fs.readFile(__dirname + '../index.html', function(err, data) {
      if (err) {
        console.log('error');
        res.writeHead(500);
        return res.end('error loading index.html');
      } else {
        console.log('success');
        res.writeHead(200);
        return res.end(data);
      }
    });
  });

  webserver = require('http').createServer(app);
  chartserver = require('http').createServer(app);
  graphserver = require('http').createServer(app);

  
  fs = require('fs');

  __dirname = '';

  webserver.listen(8000, function() {
    return console.log('Web listening');
  });

  chartserver.listen(3000, function() {
    return console.log('Chart socket listening');
  });

  chart_io = require('socket.io')(chartserver);

  graphserver.listen(4000, function() {
    return console.log('Graph socket listening');
  });

  graph_io = require('socket.io')(graphserver);



   generateChartData = function() {
    var lineChartData;
    return lineChartData = [
      {
        label: 'node2',
        datapoints: []
      }, {
        label: 'node3',
        datapoints: []
      }, {
        label: 'node4',
        datapoints: []
      }, {
        label: 'node5',
        datapoints: []
      }, {
        label: 'node6',
        datapoints: []

      }  , {
        label: 'node7',
        datapoints: []

      }   , {
        label: 'node8',
        datapoints: []

      }   , {
        label: 'node9',
        datapoints: []

      }   , {
        label: 'node10',
        datapoints: []

      }    
    ];
  };

  

chart_io.sockets.on('connection', function(socket) {
   
    socket.on('join', function (data) {
        socket.join(data.socketid);
    });
 
    chart_io.to('chart').emit('init', generateChartData());
    console.log('connected');
    
    socket.on('updateComponent', function(data) {});

    socket.on('update',function(data){
        console.log ('Recvd data from python');
        data = JSON.parse(data);
        //console.log (data);
        chart_io.to('chart').emit('update',data);

    });


  });


var nw_data; 

/*initializing the websockets communication , server instance has to be sent as the argument */
graph_io.sockets.on("connection",function(socket){
      
      //Clients will join the server in rooms/channels
      //rpsock is the routing processor socket
      //browswersock is the web browser socket
      socket.on('join', function (data) {
        console.log(data.socketid);
        socket.join(data.socketid);
        //If browser just joined - send it the DOGE network info
        if (data.socketid === 'browsersock') {
          graph_io.to('browsersock').emit("load_network",nw_data);
          console.log('browser connected - sending load n/w data');

        }
 
      });
      var ack_to_client = {
          data:"Server Received the message"
        }
      graph_io.to('browsersock').emit(JSON.stringify(ack_to_client));
  
    console.log('Socket.io Connection with the client established');
    
    //Handle incoming messages from the browser
    socket.on("message",function(data,callback){
        console.log('Received request from browser:');
        console.log(data);
        graph_io.to('rpsock').emit(data);
    }); 

    //Routing Processor will send the network info as a 'load network message'
    //Handle load network message to render network on vis
    socket.on("load_network",function(data){
        console.log("Received load network");
        nw_data = data;
        //Debug
        // data = JSON.parse(data);
        // console.log(data);
        var ack_to_client = {
          data:"Server Received the message"
        }
        graph_io.to('rpsock').emit('ack',JSON.stringify(ack_to_client));
    });

    socket.on("confirm",function(data){
        graph_io.to('browsersock').emit("confirm",data);
        console.log("Received confirmation from RP:");
       // Debug
         data = JSON.parse(data);
         console.log(data);
    });
 
});
}).call(this);
